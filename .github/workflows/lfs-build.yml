name: Build Kubelinux Base OS

env:
  PATH: ${GITHUB_WORKSPACE}/tools/bin:${PATH}

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    container:
      image: rockylinux:9
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Build Dependencies
        run: |
          dnf install -y make gcc g++ perl python3 info wget bison flex patch tar xz

      - name: Restore Cached Kubelinux Source
        id: restore-kubelinux-source
        uses: actions/cache/restore@v4
        with:
          path: |
            ${GITHUB_WORKSPACE}/sources
            ${GITHUB_WORKSPACE}/sources/*
          key: kubelinux-source

      - name: Download Kubelinux Source
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/sources
          if wget --input-file=wget-list --continue --directory-prefix=${GITHUB_WORKSPACE}/sources; then
            echo -ne "0" > ${{ runner.temp }}/wget_status
          else
            echo -ne "1" > ${{ runner.temp }}/wget_status
          fi

      - name: Cache Kubelinux Source
        id: cache-kubelinux-source
        uses: actions/cache/save@v4
        with:
          path: |
            ${GITHUB_WORKSPACE}/sources
            ${GITHUB_WORKSPACE}/sources/*
          key: ${{ steps.restore-kubelinux-source.outputs.cache-primary-key }}
      
      - name: Source Code Failure Exit
        run: |
          exit $(cat ${{ runner.temp }}/wget_status)

      - name: Build Binutils
        run: |
          cd ${GITHUB_WORKSPACE}/sources && mkdir binutils
          tar -xf ${GITHUB_WORKSPACE}/sources/binutils-*.tar.xz -C binutils
          cd binutils && mkdir build
          ../configure \
            --prefix=${GITHUB_WORKSPACE}/output/tools \
            --with-sysroot=${GITHUB_WORKSPACE}/output \
            --target=$(uname -m)-lfs-linux-gnu \
            --disable-nls \
            --disable-werror
          make -j$(nproc)
          make install
          cd ${GITHUB_WORKSPACE} && rm -Rf ${GITHUB_WORKSPACE}/sources/binutils

          

      #- name: Create OSTree Repository
      #  run: |
      #    mkdir -p /tmp/ostree_repo
      #    ostree --repo=/tmp/ostree_repo init --mode=archive-z2
      #    ostree --repo=/tmp/ostree_repo commit -b kubelinux --tree=dir=/mnt/lfs --subject="LFS Build $(date)"

      #- name: Upload OSTree Commit to S3
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #  run: |
      #    aws s3 sync /tmp/ostree_repo s3://kubelinux-ostree --acl public-read

      #- name: Publish OSTree Image as OCI for BootC
      #  run: |
      #    podman build -t ghcr.io/${{ github.repository }}/kubelinux-lfs:latest -f Dockerfile
      #    podman push ghcr.io/${{ github.repository }}/kubelinux-lfs:latest